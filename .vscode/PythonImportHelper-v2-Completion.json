[
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "Context",
        "importPath": "django.template",
        "description": "django.template",
        "isExtraImport": true,
        "detail": "django.template",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "django.http.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.http.request",
        "description": "django.http.request",
        "detail": "django.http.request",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "django.contrib.admin.decorators",
        "description": "django.contrib.admin.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.admin.decorators",
        "documentation": {}
    },
    {
        "label": "add_preserved_filters",
        "importPath": "django.contrib.admin.templatetags.admin_urls",
        "description": "django.contrib.admin.templatetags.admin_urls",
        "isExtraImport": true,
        "detail": "django.contrib.admin.templatetags.admin_urls",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "SimpleTemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "TemplateResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.template.response",
        "description": "django.template.response",
        "isExtraImport": true,
        "detail": "django.template.response",
        "documentation": {}
    },
    {
        "label": "gettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "ngettext",
        "importPath": "django.utils.translation",
        "description": "django.utils.translation",
        "isExtraImport": true,
        "detail": "django.utils.translation",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "csrf_protect",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "ChangeList",
        "importPath": "django.contrib.admin.views.main",
        "description": "django.contrib.admin.views.main",
        "isExtraImport": true,
        "detail": "django.contrib.admin.views.main",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "books.management.commands.fake_record",
        "description": "books.management.commands.fake_record",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Description of your custom command'\n    def handle(self, *args, **options):\n        self.stdout.write(\"Creating fake records...\")\n        fake_field_creator(_HOW_MANY)\n        self.stdout.write(f\"{_HOW_MANY} records created successfully!\")",
        "detail": "books.management.commands.fake_record",
        "documentation": {}
    },
    {
        "label": "_HOW_MANY",
        "kind": 5,
        "importPath": "books.management.commands.fake_record",
        "description": "books.management.commands.fake_record",
        "peekOfCode": "_HOW_MANY = 100\nclass Command(BaseCommand):\n    help = 'Description of your custom command'\n    def handle(self, *args, **options):\n        self.stdout.write(\"Creating fake records...\")\n        fake_field_creator(_HOW_MANY)\n        self.stdout.write(f\"{_HOW_MANY} records created successfully!\")",
        "detail": "books.management.commands.fake_record",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "books.migrations.0001_initial",
        "description": "books.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Book',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=100)),",
        "detail": "books.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "books.migrations.0002_remove_book_no_book_serial_number",
        "description": "books.migrations.0002_remove_book_no_book_serial_number",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('books', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='book',\n            name='no',\n        ),\n        migrations.AddField(",
        "detail": "books.migrations.0002_remove_book_no_book_serial_number",
        "documentation": {}
    },
    {
        "label": "submit_row",
        "kind": 2,
        "importPath": "books.templatetags.custome_submit_row",
        "description": "books.templatetags.custome_submit_row",
        "peekOfCode": "def submit_row(context):\n    \"\"\"\n    Display the row of buttons for delete and save.\n    \"\"\"\n    add = context[\"add\"]\n    change = context[\"change\"]\n    is_popup = context[\"is_popup\"]\n    save_as = context[\"save_as\"]\n    show_save = context.get(\"show_save\", True)\n    show_save_and_add_another = context.get(\"show_save_and_add_another\", True)",
        "detail": "books.templatetags.custome_submit_row",
        "documentation": {}
    },
    {
        "label": "submit_row_tag",
        "kind": 2,
        "importPath": "books.templatetags.custome_submit_row",
        "description": "books.templatetags.custome_submit_row",
        "peekOfCode": "def submit_row_tag(parser, token):\n    return InclusionAdminNode(\n        parser, token, func=submit_row, template_name=\"submit_line.html\"\n    )",
        "detail": "books.templatetags.custome_submit_row",
        "documentation": {}
    },
    {
        "label": "IncorrectLookupParameters",
        "kind": 6,
        "importPath": "books.admin",
        "description": "books.admin",
        "peekOfCode": "class IncorrectLookupParameters(Exception):\n    pass\ncsrf_protect_m = method_decorator(csrf_protect)\n@admin.register(Book)\nclass Admin(admin.ModelAdmin):\n    def get_changelist_instance(self, request):\n        \"\"\"\n        Return a `ChangeList` instance based on `request`. May raise\n        `IncorrectLookupParameters`.\n        \"\"\"",
        "detail": "books.admin",
        "documentation": {}
    },
    {
        "label": "Admin",
        "kind": 6,
        "importPath": "books.admin",
        "description": "books.admin",
        "peekOfCode": "class Admin(admin.ModelAdmin):\n    def get_changelist_instance(self, request):\n        \"\"\"\n        Return a `ChangeList` instance based on `request`. May raise\n        `IncorrectLookupParameters`.\n        \"\"\"\n        print(request.body)\n        list_display = self.get_list_display(request)\n        list_display_links = self.get_list_display_links(request, list_display)\n        # Add the action checkboxes if any actions are available.",
        "detail": "books.admin",
        "documentation": {}
    },
    {
        "label": "csrf_protect_m",
        "kind": 5,
        "importPath": "books.admin",
        "description": "books.admin",
        "peekOfCode": "csrf_protect_m = method_decorator(csrf_protect)\n@admin.register(Book)\nclass Admin(admin.ModelAdmin):\n    def get_changelist_instance(self, request):\n        \"\"\"\n        Return a `ChangeList` instance based on `request`. May raise\n        `IncorrectLookupParameters`.\n        \"\"\"\n        print(request.body)\n        list_display = self.get_list_display(request)",
        "detail": "books.admin",
        "documentation": {}
    },
    {
        "label": "BooksConfig",
        "kind": 6,
        "importPath": "books.apps",
        "description": "books.apps",
        "peekOfCode": "class BooksConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'books'",
        "detail": "books.apps",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "books.models",
        "description": "books.models",
        "peekOfCode": "class Book(models.Model):\n    title = models.CharField(max_length=100)\n    publication_date = models.DateField()\n    price = models.FloatField()\n    serial_number = models.CharField(max_length=36, null=True, blank=True)\n    description = models.TextField()\n    def __str__(self):\n        return self.title",
        "detail": "books.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "books.urls",
        "description": "books.urls",
        "peekOfCode": "urlpatterns = [\n    path('',index, name='index')\n]",
        "detail": "books.urls",
        "documentation": {}
    },
    {
        "label": "FakeModelFactory",
        "kind": 6,
        "importPath": "books.utils",
        "description": "books.utils",
        "peekOfCode": "class FakeModelFactory:\n    \"\"\"\n    The tool to create fake data.\n    model: table in which the data will be persisted\n    fake_field_creator: the function which returns\n            a dictionary containing fields and faker implementations\n    \"\"\"\n    def __init__(\n            self,\n            model: models.base.ModelBase, ",
        "detail": "books.utils",
        "documentation": {}
    },
    {
        "label": "fake_creator",
        "kind": 2,
        "importPath": "books.utils",
        "description": "books.utils",
        "peekOfCode": "def fake_creator() -> dict[str, Any]:\n    faker = Faker('en_US')\n    return {\n    'title':faker.unique.name(),\n    'publication_date':faker.date(),\n    'price':faker.pyint(min_value=20, max_value=100),\n    'serial_number':faker.uuid4(),\n    'description':faker.text(faker.pyint(min_value=200, max_value=300)),\n    }\ndef fake_field_creator(how_many=100):",
        "detail": "books.utils",
        "documentation": {}
    },
    {
        "label": "fake_field_creator",
        "kind": 2,
        "importPath": "books.utils",
        "description": "books.utils",
        "peekOfCode": "def fake_field_creator(how_many=100):\n    fake_category_factory = FakeModelFactory(Book,fake_creator)\n    fake_category_factory.create_fake_record(how_many)",
        "detail": "books.utils",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "books.views",
        "description": "books.views",
        "peekOfCode": "def index(request):\n    return render(request, 'custome_changelist.html')\n# Create your views here.",
        "detail": "books.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project_config.asgi",
        "description": "project_config.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "project_config.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-c3vqm*+g(mj2sfh%a9s3(9_q+-^0@v&llw-bi5suc+k3o&&4qx'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nINTERNAL_IPS = [\n    \"127.0.0.1\",",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-c3vqm*+g(mj2sfh%a9s3(9_q+-^0@v&llw-bi5suc+k3o&&4qx'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\nINTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "INTERNAL_IPS",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "INTERNAL_IPS = [\n    \"127.0.0.1\",\n]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django_extensions',\n    'debug_toolbar',\n    'books',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "MIDDLEWARE = [\n    \"debug_toolbar.middleware.DebugToolbarMiddleware\",\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG_TOOLBAR_PANELS",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "DEBUG_TOOLBAR_PANELS = [\n    'debug_toolbar.panels.versions.VersionsPanel',\n    'debug_toolbar.panels.timer.TimerPanel',\n    'debug_toolbar.panels.settings.SettingsPanel',\n    'debug_toolbar.panels.headers.HeadersPanel',\n    'debug_toolbar.panels.request.RequestPanel',\n    'debug_toolbar.panels.sql.SQLPanel',\n    'debug_toolbar.panels.staticfiles.StaticFilesPanel',\n    'debug_toolbar.panels.templates.TemplatesPanel',\n    'debug_toolbar.panels.cache.CachePanel',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "ROOT_URLCONF = 'project_config.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "WSGI_APPLICATION = 'project_config.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_ROOT = BASE_DIR / 'templates'\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_ROOT = BASE_DIR / 'templates'\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_ROOT = BASE_DIR / 'templates'\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_ROOT = BASE_DIR / 'templates'\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'templates'\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "project_config.settings",
        "description": "project_config.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "project_config.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "project_config.urls",
        "description": "project_config.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path(\"__debug__/\", include(\"debug_toolbar.urls\")),\n    path(\"\", include(\"books.urls\")),\n    # path('', include('books')),\n]",
        "detail": "project_config.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "project_config.wsgi",
        "description": "project_config.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "project_config.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]